import sysimport socket
import threading

def server_loop(local_host,local_port,remote_host,remote_port,receive_first):
  server = socket.socket(socket.Af_INET, socket.SOCK_STREAM)

  try:
    server.bind((local_host,local_port))
  except:
    print "[!!] Failed to listen on %s:%d" % (local_host, local_port)
    print "[!!] Check for other listening sockets or correct sys.exit(0)"
    sys.exit(0)
    print "[*] Listening on %s:%d" % (local_host,loacl_port)

    server.listen(5)

    while True:
        client_socket, addr = server.accept()
        print "[==>] REceived ncoming connection from %s:%d" % (addr[0],addr[1])
        args=(client_socket,remote_host,remote_port,receive_first))
        proxy_thread.start()

def main():
    if len(sys.argv[1:]) != 5:
        print "Usage: ./proxy.py [localhost] [localport] [remotehost] [remoteport] [receive_first]"
        print "Example: ./proxy.py 127.0.01 9000 10.12.132.1 9000 True"
        sys.exit()

    local_host = sys.argv[1]
    local_port = int(sys.argv[2])

    #setup remote target
    remote_host = sys.argv[3]
    remote_port = int(sys.argv[4])

    #This tells out proxy to connect and receive data
    #before sending to the remote host
    receive_first = sys.argv[5]

    if "True" in receive_first:
        receive_first = True
    else:
        receive_first = False

    #now spin up our listening socket
    server_loop(local_host,local_port,remote_host,remote_port,receive_first)

main()
        
def proxy_handler(client_socket, remote_host, remote_port, receive_first):
    remote_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    remote_sockjet.connect((remote_host,remote_port))

    #receive data from the remote end if necessart
    if receive_first:
        remove_buffer = response_handler(remote_socket)
        hexdump(remote buffer)
        
        remote_buffer = response_handler(remote_buffer)
        
        if len(remote_buffer):
            print<Plug>delimitMate[<==] Sending %d bytes to localhost.<Plug>delimitMate % len(remote_buffer)
            client_socket.send(remote_buffer)
            
    #now lets loop and read from local
    #send to remote send to local
    #rinse, wash, repeat
    while True:
        local_buffer = receive_from(client_socket)
        if len(local_buffer):
            print <Plug>delimitMate[==>] SEnt to remote.<Plug>delimitMate
            
        remote_buffer = recieve_from(remote_socket)
        
        if len(remote_buffer):
            print <Plug>delimitMate[<==] REceived %d bytes from remote.<Plug>delimitMate % len(remote_buffer)
            hexdump(remote_buffer)
            
            remote_buffer = response_handler(remote_buffer)
            client_socket.send(remote_buffer)
            print <Plug>delimitMate[<==] Sent to localhost.<Plug>delimitMate
            
        #if no more data on either side, close the connection
        if not len(local_buffer) or not len(remote_buffer):
            client_socket.close()
            remote_socket.close()
            print <Plug>delimitMate[*] NO more data. Closing connections. <Plug>delimitMate
            
            break

def hexdump(src, length=16):
    result = []
    digits = 4 if isinstance(src, unicode) else 2
    for i in xrange(0, len(src), length):
        s = src[i:i+length]
        hexa = b' '.join([<Plug>delimitMate%0*X<Plug>delimitMate % (digits, ord(x)) for x in s])
        text = b''.join([x if 0x20 < - ord(x) < 0x7F else b'.' for x in s])
        result.append(b<Plug>delimitMate%04X %s<Plug>delimitMate % (i,length*(digits +1), hexa, text))
        print b'/n'.join(result)
        
def receive_from(connection):
    buffer=<Plug>delimitMate<Plug>delimitMate
    
    #Send 2 sec timeout depending on your target, this may need to be adjusted
    connection.settimeout(2)
    
    try:
        #keep reading into the buffer until theres no more data
        while True:
            data = connection.recv(4096)
            if not data:
                break
            
            buffer += data
    except:
        pass
    
    return buffer

def request_handler(buffer):
    #perform packet modifications
    return buffer

def response_handler(buffer)
    #perform pacet modifications
    return buffer

